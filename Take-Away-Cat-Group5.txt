BIT2203
ADVANCED DATABASE MANAGEMENT SYSTEM
TAKEAWAY CAT
GROUP 5
CALEB MOKUA - SCT221-0211/2021
CLAIRE NDUNG’U - SCT221-0210/2021
GEORGE JUMA - SCT221-0635/2021
SHADRACK MAUNDU - SCT221-0096/2021
WILLIAM MALOK - SCT221-0595/2019
HUTCHSON GICHUKI - SCT221-0284/2019


1. How data was ingested into Hadoop data lake:
	hdfs dfs -mkdir /kenyac19data
	hdfs dfs -put D:\class_units\3.1\AdvDB\TakeAwayCat\kenyac19data.csv /kenyac19data

2. How data was extracted using pyspark:
	from pyspark.sql import SparkSession
	spark = SparkSession.builder.appName("DataLakeExtract").getOrCreate()
	csv_files_path = "hdfs://localhost:9000/kenyac19data/kenyac19data.csv"
	data = spark.read.format("csv").option("header","true").load(csv_files_path)
	data.show()

3. Pre-processing task/techniques used to prepare data:
	
	i) remove all the rows with null values, string values and floating point values
	from pyspark.sql.functions import col
	data_filtered = data.filter((col("Infected") % 1 == 0) | (col("Recovered") % 1 == 0) | (col("Deaths") % 1 == 0)) 
	data_filtered.show()

	ii) remove all rows with zero(0) values
	df = data.filter((col("Infected") != 0) | (col("Recovered") != 0) | (col("Deaths") != 0)) 
	df.show()

4. Predicitive analytics technique to generate a model to predict number of deaths (Mean Squared Error):
	from sklearn.model_selection import train test split
	from sklearn.linear_model import LinearRegression
	from sklearn.metrics import mean_squared_error 
	df pd.DataFrame(df) 
  	x = df[['Infected', 'Recovered']]
	y = df['Deaths']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test size-0.2, random state-40)
	model LinearRegression()
	model.fit(x_train, y_train)
	predictions = model.predict(x_test)
	mse = mean_squared_error(y_test, predictions)
	print(f"Mean Squared Error: (mse}") 
	Output: Mean Squared Error: 88540.72813249362

5. Visualizing the model(Residual Plot):
	import matplotlib.pyplot as plt
	residuals = y_test - predictions
	plt.scatter(predictions, residuals) 	
	plt.xlabel('Predicted')
	plt.ylabel('Residuals')
	plt.axhline(y=0, color='r', linestyle='--')	
	plt.title('Visualize Deaths Residual Plot')
	plt.show()

6. Validating results and interpretations:
	from sklearn.metrics import mean_squared_error
	rmse = mean_squared_error(y_test,predictions, squared=false)
	print("Root Mean Squared Error: ", rmse)
	Output: Root Mean Squared Error: 297.557940
	
